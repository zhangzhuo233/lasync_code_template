!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKLOG	lib/constants.h	/^const int BACKLOG = 10;$/;"	v
CXXFLAGS	Makefile	/^CXXFLAGS = -Wno-write-strings -Wno-format-security$/;"	m
DEST	Makefile	/^DEST = $(prefix)\/ladaemon$/;"	m
LACmdUtils	lib/cmdutils.h	/^class LACmdUtils$/;"	c
LACommand	lib/command.h	/^class LACommand$/;"	c
LACommandExecuter	lib/command.cpp	/^LACommandExecuter::LACommandExecuter()$/;"	f	class:LACommandExecuter
LACommandExecuter	lib/command.h	/^class LACommandExecuter$/;"	c
LAConfigParser	lib/configparser.cpp	/^LAConfigParser::LAConfigParser(char* path)$/;"	f	class:LAConfigParser
LAConfigParser	lib/configparser.cpp	/^LAConfigParser::LAConfigParser(std::string path)$/;"	f	class:LAConfigParser
LAConfigParser	lib/configparser.h	/^class LAConfigParser$/;"	c
LADirReader	lib/dirreader.cpp	/^LADirReader::LADirReader(char* path)$/;"	f	class:LADirReader
LADirReader	lib/dirreader.cpp	/^LADirReader::LADirReader(std::string path_str):path(path_str)$/;"	f	class:LADirReader
LADirReader	lib/dirreader.h	/^class LADirReader$/;"	c
LADirectoryCanNotReadException	lib/exception.cpp	/^LADirectoryCanNotReadException::LADirectoryCanNotReadException(char* path)$/;"	f	class:LADirectoryCanNotReadException
LADirectoryCanNotReadException	lib/exception.cpp	/^LADirectoryCanNotReadException::LADirectoryCanNotReadException(std::string path)$/;"	f	class:LADirectoryCanNotReadException
LADirectoryCanNotReadException	lib/exception.h	/^class LADirectoryCanNotReadException: public LAException$/;"	c
LADirectoryOpenException	lib/exception.cpp	/^LADirectoryOpenException::LADirectoryOpenException(char* path)$/;"	f	class:LADirectoryOpenException
LADirectoryOpenException	lib/exception.cpp	/^LADirectoryOpenException::LADirectoryOpenException(std::string path)$/;"	f	class:LADirectoryOpenException
LADirectoryOpenException	lib/exception.h	/^class LADirectoryOpenException: public LAException$/;"	c
LADuplicateKeyException	lib/exception.cpp	/^LADuplicateKeyException::LADuplicateKeyException(std::string key)$/;"	f	class:LADuplicateKeyException
LADuplicateKeyException	lib/exception.h	/^class LADuplicateKeyException: public LAException$/;"	c
LAException	lib/exception.h	/^class LAException$/;"	c
LAFileNotFoundException	lib/exception.cpp	/^LAFileNotFoundException::LAFileNotFoundException(char* path)$/;"	f	class:LAFileNotFoundException
LAFileNotFoundException	lib/exception.cpp	/^LAFileNotFoundException::LAFileNotFoundException(std::string path)$/;"	f	class:LAFileNotFoundException
LAFileNotFoundException	lib/exception.h	/^class LAFileNotFoundException: public LAException$/;"	c
LAFileSyncCommand	lib/command.cpp	/^LAFileSyncCommand::LAFileSyncCommand(const std::string& nfsdir)$/;"	f	class:LAFileSyncCommand
LAFileSyncCommand	lib/command.h	/^class LAFileSyncCommand: public LACommand$/;"	c
LAFsUtils	lib/fsutils.h	/^class LAFsUtils$/;"	c
LAKeyNotFoundException	lib/exception.cpp	/^LAKeyNotFoundException::LAKeyNotFoundException(std::string key)$/;"	f	class:LAKeyNotFoundException
LAKeyNotFoundException	lib/exception.h	/^class LAKeyNotFoundException: public LAException$/;"	c
LALogUtils	lib/logutils.cpp	/^LALogUtils::LALogUtils()$/;"	f	class:LALogUtils
LALogUtils	lib/logutils.h	/^class LALogUtils: public LASingletonTemplateBase<LALogUtils>$/;"	c
LAMscUtils	lib/mscutils.h	/^class LAMscUtils$/;"	c
LAMsg	lib/netutils.h	/^struct LAMsg$/;"	s
LANetUtils	lib/netutils.h	/^class LANetUtils$/;"	c
LANfsUtils	lib/nfsutils.h	/^class LANfsUtils$/;"	c
LAPkgCommand	lib/command.cpp	/^LAPkgCommand::LAPkgCommand()$/;"	f	class:LAPkgCommand
LAPkgCommand	lib/command.h	/^class LAPkgCommand: public LACommand$/;"	c
LAScriptCommand	lib/command.h	/^class LAScriptCommand: public LACommand$/;"	c
LAScriptExecutor	lib/scriptexecutor.cpp	/^LAScriptExecutor::LAScriptExecutor(char* confpath):scripts(NULL)$/;"	f	class:LAScriptExecutor
LAScriptExecutor	lib/scriptexecutor.cpp	/^LAScriptExecutor::LAScriptExecutor(std::string confpath):scripts(NULL)$/;"	f	class:LAScriptExecutor
LAScriptExecutor	lib/scriptexecutor.h	/^class LAScriptExecutor$/;"	c
LASingletonTemplateBase	lib/singletontemplate.h	/^        LASingletonTemplateBase()$/;"	f	class:LASingletonTemplateBase
LASingletonTemplateBase	lib/singletontemplate.h	/^class LASingletonTemplateBase $/;"	c
LAStrUtils	lib/strutils.h	/^class LAStrUtils$/;"	c
LAThread	lib/lathread.h	/^class LAThread$/;"	c
LAUpdateCommand	lib/command.cpp	/^LAUpdateCommand::LAUpdateCommand()$/;"	f	class:LAUpdateCommand
LAUpdateCommand	lib/command.h	/^class LAUpdateCommand: public LACommand$/;"	c
LIBS	Makefile	/^LIBS = -lpthread$/;"	m
PORT	lib/constants.h	/^const int PORT = 32888;$/;"	v
PREFIX	debian/rules	/^PREFIX = $(CURDIR)\/debian\/ladaemon\/opt$/;"	m
RPMNAME	Makefile	/^RPMNAME=ladaemon-0.1-1.x86_64$/;"	m
__CMD_UTILS_HEADER__	lib/cmdutils.h	2;"	d
__COMMAND_HEADER__	lib/command.h	2;"	d
__CONFIG_PARSER_HEADER__	lib/configparser.h	2;"	d
__CONSTANTS_HEADER__	lib/constants.h	2;"	d
__DIR_READER_HEADER__	lib/dirreader.h	3;"	d
__EXCEPTION_HEADER__	lib/exception.h	2;"	d
__LANFSUTILS_HEADER___	lib/nfsutils.h	2;"	d
__LASINGLETON_HEADER__	lib/singletontemplate.h	4;"	d
__LATHREAD_HEADER__	lib/lathread.h	2;"	d
__LOG_UTILS_HEADER__	lib/logutils.h	2;"	d
__MSC_UTILS_HEADER__	lib/mscutils.h	2;"	d
__NET_UTILS_HEADER__	lib/netutils.h	2;"	d
__SCRIPT_EXECUTOR_HEADER__	lib/scriptexecutor.h	2;"	d
__STR_UTILS_HEADER__	lib/strutils.h	2;"	d
__UTILS_HEADER__	lib/fsutils.h	2;"	d
build_msg	lib/netutils.cpp	/^void* LANetUtils::build_msg(const std::string& src_ip, const std::string& dest, $/;"	f	class:LANetUtils
cleanup	main.cpp	/^void cleanup()$/;"	f
cmd	lib/netutils.h	/^    int cmd;$/;"	m	struct:LAMsg
command_queue	lib/command.h	/^        std::deque<LACommand*> command_queue;$/;"	m	class:LACommandExecuter
config_nfs	lib/nfsutils.cpp	/^bool LANfsUtils::config_nfs(const std::string nfsdir,$/;"	f	class:LANfsUtils
confpath	lib/scriptexecutor.h	/^        std::string confpath;$/;"	m	class:LAScriptExecutor
create_daemon_socket	lib/netutils.cpp	/^int LANetUtils::create_daemon_socket()$/;"	f	class:LANetUtils
create_instance	lib/command.cpp	/^LACommandExecuter* LACommandExecuter::create_instance()$/;"	f	class:LACommandExecuter
create_instance	lib/command.cpp	/^LAFileSyncCommand* LAFileSyncCommand::create_instance(const std::string& nfsdir)$/;"	f	class:LAFileSyncCommand
create_instance	lib/command.cpp	/^LAPkgCommand* LAPkgCommand::create_instance()$/;"	f	class:LAPkgCommand
create_instance	lib/command.cpp	/^LAScriptCommand* LAScriptCommand::create_instance()$/;"	f	class:LAScriptCommand
create_instance	lib/command.cpp	/^LAUpdateCommand* LAUpdateCommand::create_instance()$/;"	f	class:LAUpdateCommand
create_instance	lib/configparser.cpp	/^LAConfigParser* LAConfigParser::create_instance(const char* conf)$/;"	f	class:LAConfigParser
create_instance	lib/dirreader.h	/^    static inline LADirReader* create_instance(char* path)$/;"	f	class:LADirReader
create_instance	lib/dirreader.h	/^    static inline LADirReader* create_instance(std::string path)$/;"	f	class:LADirReader
create_instance	lib/scriptexecutor.cpp	/^LAScriptExecutor* LAScriptExecutor::create_instance(std::string conf)$/;"	f	class:LAScriptExecutor
create_temp_dir	lib/fsutils.cpp	/^bool LAFsUtils::create_temp_dir(const char* prefix, std::string& tempdir)$/;"	f	class:LAFsUtils
debug_log	lib/logutils.cpp	/^void LALogUtils::debug_log(const char* format, ...)$/;"	f	class:LALogUtils
dir_entries	lib/dirreader.h	/^    std::vector<std::string>* dir_entries;$/;"	m	class:LADirReader
endswith	lib/strutils.cpp	/^bool LAStrUtils::endswith(const char* str, const char* end)$/;"	f	class:LAStrUtils
error_log	lib/logutils.cpp	/^void LALogUtils::error_log(const char* format, ...)$/;"	f	class:LALogUtils
execute	lib/command.cpp	/^int LAFileSyncCommand::execute()$/;"	f	class:LAFileSyncCommand
execute	lib/command.cpp	/^int LAPkgCommand::execute()$/;"	f	class:LAPkgCommand
execute	lib/command.cpp	/^int LAScriptCommand::execute()$/;"	f	class:LAScriptCommand
execute	lib/command.cpp	/^int LAUpdateCommand::execute()$/;"	f	class:LAUpdateCommand
execute_all	lib/command.cpp	/^int LACommandExecuter::execute_all()$/;"	f	class:LACommandExecuter
execute_all	lib/scriptexecutor.cpp	/^int LAScriptExecutor::execute_all()$/;"	f	class:LAScriptExecutor
execute_commands	lib/lathread.cpp	/^void* LAThread::execute_commands(void* arg)$/;"	f	class:LAThread
execute_one	lib/scriptexecutor.cpp	/^int LAScriptExecutor::execute_one(const std::string& scriptname)$/;"	f	class:LAScriptExecutor
executer	main.cpp	/^LACommandExecuter* executer = LACommandExecuter::create_instance();$/;"	v
exists	lib/fsutils.cpp	/^bool LAFsUtils::exists(const char* path)$/;"	f	class:LAFsUtils
export_nfs	lib/nfsutils.cpp	/^bool LANfsUtils::export_nfs(const std::string& nfsdir)$/;"	f	class:LANfsUtils
extract_msg	lib/netutils.cpp	/^int LANetUtils::extract_msg(const void* msg, std::string& src_ip, $/;"	f	class:LANetUtils
filter_scripts	lib/scriptexecutor.cpp	/^void LAScriptExecutor::filter_scripts()$/;"	f	class:LAScriptExecutor
g_cond	main.cpp	/^pthread_cond_t g_cond = PTHREAD_COND_INITIALIZER;$/;"	v
get_first_command	lib/command.cpp	/^LACommand* LACommandExecuter::get_first_command()$/;"	f	class:LACommandExecuter
get_instance_ptr	lib/singletontemplate.h	/^        static T* get_instance_ptr()$/;"	f	class:LASingletonTemplateBase
get_instance_ref	lib/singletontemplate.h	/^        static T& get_instance_ref()$/;"	f	class:LASingletonTemplateBase
get_local_hostname	lib/netutils.cpp	/^int LANetUtils::get_local_hostname(std::string& hostname)$/;"	f	class:LANetUtils
get_nic_info	lib/netutils.cpp	/^int LANetUtils::get_nic_info(const char* nic_name, std::string& ip, std::string& broadcast)$/;"	f	class:LANetUtils
host_list_len	lib/netutils.h	/^    int host_list_len;$/;"	m	struct:LAMsg
in_list	lib/strutils.cpp	/^bool LAStrUtils::in_list(const std::string& src, const std::string& key)$/;"	f	class:LAStrUtils
info	lib/exception.h	/^        std::string info;$/;"	m	class:LADirectoryCanNotReadException
info	lib/exception.h	/^        std::string info;$/;"	m	class:LADirectoryOpenException
info	lib/exception.h	/^        std::string info;$/;"	m	class:LADuplicateKeyException
info	lib/exception.h	/^        std::string info;$/;"	m	class:LAFileNotFoundException
info	lib/exception.h	/^        std::string info;$/;"	m	class:LAKeyNotFoundException
info_log	lib/logutils.cpp	/^void LALogUtils::info_log(const char* format, ...)$/;"	f	class:LALogUtils
init	lib/scriptexecutor.cpp	/^void LAScriptExecutor::init()$/;"	f	class:LAScriptExecutor
init_daemon	lib/mscutils.cpp	/^void LAMscUtils::init_daemon()$/;"	f	class:LAMscUtils
install_list	lib/command.h	/^        std::string install_list;$/;"	m	class:LAPkgCommand
is_nfs_exported	lib/nfsutils.cpp	/^bool LANfsUtils::is_nfs_exported(const std::string& nfsdir)$/;"	f	class:LANfsUtils
is_nfs_mounted	lib/nfsutils.cpp	/^bool LANfsUtils::is_nfs_mounted(const std::string& nfsdir, std::string& mp)$/;"	f	class:LANfsUtils
is_python_script	lib/scriptexecutor.cpp	/^inline bool LAScriptExecutor::is_python_script(const std::string& filename)$/;"	f	class:LAScriptExecutor
is_queue_empty	lib/command.cpp	/^bool LACommandExecuter::is_queue_empty()$/;"	f	class:LACommandExecuter
is_shell_script	lib/scriptexecutor.cpp	/^inline bool LAScriptExecutor::is_shell_script(const std::string& filename)$/;"	f	class:LAScriptExecutor
isdirectory	lib/fsutils.cpp	/^bool LAFsUtils::isdirectory(const char* path)$/;"	f	class:LAFsUtils
isdirectory_exists	lib/fsutils.cpp	/^bool LAFsUtils::isdirectory_exists(const char* path)$/;"	f	class:LAFsUtils
isfile	lib/fsutils.cpp	/^bool LAFsUtils::isfile(const char* path)$/;"	f	class:LAFsUtils
key_value_map	lib/configparser.h	/^        std::map<std::string, std::string>* key_value_map;$/;"	m	class:LAConfigParser
lines	lib/configparser.h	/^        vector<std::string>* lines;$/;"	m	class:LAConfigParser
log	lib/logutils.cpp	/^void LALogUtils::log(const int& loglevel, const char* format, ...)$/;"	f	class:LALogUtils
logfile	lib/logutils.h	/^        std::string logfile;$/;"	m	class:LALogUtils
main	lib/utcommand.cpp	/^int main()$/;"	f
main	lib/utconfigparser.cpp	/^int main()$/;"	f
main	lib/utdirreader.cpp	/^int main()$/;"	f
main	lib/utfsutils.cpp	/^int main()$/;"	f
main	lib/utlog.cpp	/^int main()$/;"	f
main	lib/utnetutils.cpp	/^int main()$/;"	f
main	lib/utnfsutils.cpp	/^int main()$/;"	f
main	lib/utscriptexecutor.cpp	/^int main()$/;"	f
main	lib/utstrutils.cpp	/^int main()$/;"	f
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
map_has_key	lib/configparser.cpp	/^bool LAConfigParser::map_has_key(std::map<std::string, std::string>* map_ptr, std::string key)$/;"	f	class:LAConfigParser
mount_nfs	lib/nfsutils.cpp	/^bool LANfsUtils::mount_nfs(const std::string& nfsdir, const std::string& dest)$/;"	f	class:LANfsUtils
nfsdir	lib/command.h	/^        std::string nfsdir;$/;"	m	class:LAFileSyncCommand
parse_args	lib/cmdutils.cpp	/^int LACmdUtils::parse_args(int argc, char** argv, char* args, int& cmd, std::string& dest)$/;"	f	class:LACmdUtils
parse_command	lib/command.cpp	/^std::deque<LACommand*>* LACommandExecuter::parse_command(const LAMsg& msg)$/;"	f	class:LACommandExecuter
parse_msg	lib/lathread.cpp	/^int LAThread::parse_msg(void* msg)$/;"	f	class:LAThread
path	lib/configparser.h	/^        std::string path;$/;"	m	class:LAConfigParser
path	lib/dirreader.h	/^    std::string path;$/;"	m	class:LADirReader
plugindir	lib/scriptexecutor.h	/^        std::string plugindir;$/;"	m	class:LAScriptExecutor
pop_first_command	lib/command.cpp	/^void LACommandExecuter::pop_first_command()$/;"	f	class:LACommandExecuter
prefix	Makefile	/^prefix = \/opt$/;"	m
read_all	lib/configparser.cpp	/^map<std::string, std::string>* LAConfigParser::read_all()$/;"	f	class:LAConfigParser
read_config	lib/configparser.cpp	/^void LAConfigParser::read_config()$/;"	f	class:LAConfigParser
read_dir	lib/dirreader.cpp	/^vector<std::string>* LADirReader::read_dir() $/;"	f	class:LADirReader
read_pkg_list	lib/command.cpp	/^bool LAPkgCommand::read_pkg_list()$/;"	f	class:LAPkgCommand
read_plugin_dir	lib/configparser.cpp	/^const char* LAConfigParser::read_plugin_dir()$/;"	f	class:LAConfigParser
read_value	lib/configparser.cpp	/^const char* LAConfigParser::read_value(char* key)$/;"	f	class:LAConfigParser
realpath	lib/fsutils.cpp	/^bool LAFsUtils::realpath(const char* path, std::string& realpath)$/;"	f	class:LAFsUtils
remove_instance	lib/singletontemplate.h	/^        static void remove_instance()$/;"	f	class:LASingletonTemplateBase
remove_list	lib/command.h	/^        std::string remove_list;$/;"	m	class:LAPkgCommand
scripts	lib/scriptexecutor.h	/^        std::vector<std::string>* scripts;$/;"	m	class:LAScriptExecutor
self_len	lib/netutils.h	/^    int self_len;$/;"	m	struct:LAMsg
send_msg	lib/netutils.cpp	/^int LANetUtils::send_msg(void* msg, const std::string& deststr, $/;"	f	class:LANetUtils
show_exported_nfs	lib/nfsutils.cpp	/^void LANfsUtils::show_exported_nfs()$/;"	f	class:LANfsUtils
sm_instance	lib/singletontemplate.h	/^        static T* sm_instance;$/;"	m	class:LASingletonTemplateBase
sm_instance	lib/singletontemplate.h	/^T* LASingletonTemplateBase<T>::sm_instance = 0;$/;"	m	class:LASingletonTemplateBase
split	lib/strutils.cpp	/^bool LAStrUtils::split(const std::string& str, std::vector<std::string>& ret, $/;"	f	class:LAStrUtils
src	lib/netutils.h	/^    struct in_addr src;$/;"	m	struct:LAMsg	typeref:struct:LAMsg::in_addr
startswith	lib/strutils.cpp	/^bool LAStrUtils::startswith(const char* str, const char* start)$/;"	f	class:LAStrUtils
tag	lib/netutils.h	/^    char tag[0];$/;"	m	struct:LAMsg
trim	lib/strutils.cpp	/^bool LAStrUtils::trim(const std::string& line, std::string& ret)$/;"	f	class:LAStrUtils
umount_nfs	lib/nfsutils.cpp	/^bool LANfsUtils::umount_nfs(const std::string& dest)$/;"	f	class:LANfsUtils
usage	lib/cmdutils.cpp	/^void LACmdUtils::usage()$/;"	f	class:LACmdUtils
verify_pkg_list	lib/command.cpp	/^bool LAPkgCommand::verify_pkg_list(const std::string& line, std::string& ret, bool& flag)$/;"	f	class:LAPkgCommand
~LACommand	lib/command.h	/^        virtual ~LACommand(){};$/;"	f	class:LACommand
~LACommandExecuter	lib/command.cpp	/^LACommandExecuter::~LACommandExecuter()$/;"	f	class:LACommandExecuter
~LAConfigParser	lib/configparser.cpp	/^LAConfigParser::~LAConfigParser()$/;"	f	class:LAConfigParser
~LADirReader	lib/dirreader.cpp	/^LADirReader::~LADirReader()$/;"	f	class:LADirReader
~LADirectoryCanNotReadException	lib/exception.h	/^        virtual ~LADirectoryCanNotReadException(){};$/;"	f	class:LADirectoryCanNotReadException
~LADirectoryOpenException	lib/exception.h	/^        virtual ~LADirectoryOpenException(){};$/;"	f	class:LADirectoryOpenException
~LADuplicateKeyException	lib/exception.h	/^        virtual ~LADuplicateKeyException(){};$/;"	f	class:LADuplicateKeyException
~LAException	lib/exception.h	/^        virtual ~LAException(){};$/;"	f	class:LAException
~LAFileNotFoundException	lib/exception.h	/^        virtual ~LAFileNotFoundException(){};$/;"	f	class:LAFileNotFoundException
~LAFileSyncCommand	lib/command.cpp	/^LAFileSyncCommand::~LAFileSyncCommand()$/;"	f	class:LAFileSyncCommand
~LAKeyNotFoundException	lib/exception.h	/^        virtual ~LAKeyNotFoundException(){};$/;"	f	class:LAKeyNotFoundException
~LALogUtils	lib/logutils.h	/^        virtual ~LALogUtils(){};$/;"	f	class:LALogUtils
~LAPkgCommand	lib/command.cpp	/^LAPkgCommand::~LAPkgCommand()$/;"	f	class:LAPkgCommand
~LAScriptCommand	lib/command.cpp	/^LAScriptCommand::~LAScriptCommand()$/;"	f	class:LAScriptCommand
~LAScriptExecutor	lib/scriptexecutor.cpp	/^LAScriptExecutor::~LAScriptExecutor()$/;"	f	class:LAScriptExecutor
~LASingletonTemplateBase	lib/singletontemplate.h	/^        virtual ~LASingletonTemplateBase()$/;"	f	class:LASingletonTemplateBase
~LAUpdateCommand	lib/command.cpp	/^LAUpdateCommand::~LAUpdateCommand()$/;"	f	class:LAUpdateCommand
